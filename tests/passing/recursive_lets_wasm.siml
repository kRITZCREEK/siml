let add : Int -> Int -> Int =
  \x. \y. primadd;

type N {
  S(N),
  Z()
}

let identity : forall a. a -> a = \x. x;

let natural_to_int : N -> Int =
  letrec f = \n. match n {
    N::Z() => 0,
    N::S(next) => add 1 (f next),
  } in
  f;

let main : Int =
  natural_to_int N::S(N::S(N::S(N::Z())));