use crate::token::Token;
use crate::expr::Expr;

grammar;

extern {
    enum Token {
        "identifier" => Token::Ident(<String>),
        "\\" => Token::Lambda,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "." => Token::Dot,
    }
}

pub Expr: Expr = {
    ExprAtom,
    "\\" <binder: "identifier"> "." <body: Expr> =>
        Expr::Lambda { binder: binder.to_string(), body: Box::new(body) },
    <function: ExprAtom> <arguments: ExprAtom+> => {
        arguments
          .into_iter()
          .fold(function, |acc, x| Expr::App { func: Box::new(acc), arg: Box::new(x) })
    },
}

ExprAtom: Expr = {
    <i:"identifier"> => Expr::Var(i.to_string()),
    "(" <e:Expr> ")" => e,
};
