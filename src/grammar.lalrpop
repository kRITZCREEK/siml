use crate::token::Token;
use crate::expr::{Expr, Literal};
use crate::types::{Type};

grammar;

extern {
    enum Token {
        "identifier" => Token::Ident(<String>),
        "int_literal" => Token::IntLiteral(<i32>),
        "bool_literal" => Token::BooleanLiteral(<bool>),
        "\\" => Token::Lambda,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "." => Token::Dot,
        "->" => Token::Arrow,
        ":" => Token::Colon,
    }
}

pub Expr: Expr = {
    ExprAtom,
    "\\" <binder: "identifier"> "." <body: Expr> =>
        Expr::Lambda { binder: binder.to_string(), body: Box::new(body) },
    <function: ExprAtom> <arguments: ExprAtom+> => {
        arguments
          .into_iter()
          .fold(function, |acc, x| Expr::App { func: Box::new(acc), arg: Box::new(x) })
    },
}

ExprAtom: Expr = {
    <i:"identifier"> => Expr::Var(i.to_string()),
    "int_literal" => Expr::Literal(Literal::Int(<>)),
    "bool_literal" => Expr::Literal(Literal::Bool(<>)),
    "(" <e:Expr> ":" <t:Type> ")" => Expr::Ann{ ty: t, expr: Box::new(e) },
    "(" <e:Expr> ")" => e,
};

pub Type: Type = {
    <arg: TypeAtom> "->" <result: Type> => {
        Type::Fun {arg: Box::new(arg), result: Box::new(result)}
    },
    TypeAtom
}

TypeAtom: Type = {
    "(" <t:Type> ")" => t,
    <i:"identifier"> => {
        match i.as_ref() {
          "Int" => Type::Int,
          "Bool" => Type::Bool,
          _ => Type::Var(i),
        }
    }
}