use std::str::FromStr;
use crate::token::Token;
use crate::ast::Expr;

grammar;

extern {
    // type Location = BytePos;
    // type Error = Spanned<Error, BytePos>;

    enum Token {
        "identifier" => Token::Ident(<String>),
        "\\" => Token::Lambda,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "." => Token::Dot,
    }
}

pub Expr: Expr = {
    ExprAtom,
    "\\" <binder: "identifier"> "." <body: Expr> =>
      Expr::Lambda { binder: binder.to_string(), body: Box::new(body) },
    <function: ExprAtom> <arguments: ExprAtom+> => {
      Expr::App { func: Box::new(function), args: arguments.into_iter().collect() }
    },
}

ExprAtom: Expr = {
    <i:"identifier"> => Expr::Var(i.to_string()),
    "(" <e:Expr> ")" => e,
};
