use crate::token::Token;
use crate::expr::*;
use crate::bi_types::{Type};

grammar;

extern {
    enum Token {
        "identifier" => Token::Ident(<String>),
        "upper_identifier" => Token::UpperIdent(<String>),
        "int_literal" => Token::IntLiteral(<i32>),
        "bool_literal" => Token::BooleanLiteral(<bool>),
        "forall" => Token::Forall,
        "let" => Token::Let,
        "in" => Token::In,
        "match" => Token::Match,
        "type" => Token::Type,
        "=" => Token::Equals,
        "\\" => Token::Lambda,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "." => Token::Dot,
        "->" => Token::Arrow,
        "=>" => Token::FatArrow,
        ":" => Token::Colon,
        "::" => Token::DoubleColon,
        "," => Token::Comma,
        ";" => Token::Semi,
    }
}

pub Program: Vec<Declaration<String>> = {
  Declaration+
}

pub Declaration: Declaration<String> = {
 "let" <name: "identifier"> ":" <ty: Type> "=" <expr: Expr> ";" =>
   Declaration::Value(
     ValueDeclaration
       { expr: Expr::Ann { expr: Box::new(expr), ty },
         name: name.to_string()
       }),
 "type" <name: "upper_identifier"> "{" <constructors: CommaSep<DataConstructor>> "}" =>
   Declaration::Type(TypeDeclaration { name: name.to_string(), constructors })
}

DataConstructor: DataConstructor = {
  <name: "upper_identifier"> "(" <fields: CommaSep<Type>> ")" => DataConstructor { name: name.to_string(), fields }
}

pub Expr: ParserExpr = {
    ExprAtom,
    "\\" <binder: "identifier"> "." <body: Expr> =>
        Expr::Lambda { binder: binder.to_string(), body: Box::new(body) },
    "let" <binder: "identifier"> "=" <expr: Expr> "in" <body: Expr> =>
        Expr::Let { binder: binder.to_string(), expr: Box::new(expr), body: Box::new(body) },
    "match" <expr: Expr> "{" <cases: CommaSep<Case>> "}" =>
        Expr::Match { expr: Box::new(expr), cases },
    <function: ExprAtom> <arguments: ExprAtom+> => {
        arguments
          .into_iter()
          .fold(function, |acc, x| Expr::App { func: Box::new(acc), arg: Box::new(x) })
    },
}

pub Case: Case<String> = {
  <dtor: Dtor> "(" <binders: CommaSep<"identifier">> ")" "=>" <expr: Expr> =>
    Case { data_constructor: dtor, binders, expr }
};

Dtor: Dtor = {
  <ty: "upper_identifier"> "::" <name: "upper_identifier"> => Dtor { ty, name }
};

ExprAtom: ParserExpr = {
    "identifier" => Expr::Var(<>.to_string()),
    "int_literal" => Expr::Literal(Literal::Int(<>)),
    "bool_literal" => Expr::Literal(Literal::Bool(<>)),
    <dtor: Dtor> "(" <args: CommaSep<Expr>> ")" => {
      Expr::Construction { dtor, args }
    },
    "(" <e:Expr> ":" <t:Type> ")" => Expr::Ann{ ty: t, expr: Box::new(e) },
    "(" <fst:Expr> "," <snd:Expr> ")" => Expr::Tuple(Box::new(fst), Box::new(snd)),
    "(" <e:Expr> ")" => e,
};

pub Type: Type = {
    "forall" <vars: "identifier"+> "." <ty: Type> => {
        Type::Poly {vars, ty: Box::new(ty)}
    },
    <arg: TypeAtom> "->" <result: Type> => {
        Type::Fun {arg: Box::new(arg), result: Box::new(result)}
    },
    TypeAtom
}

TypeAtom: Type = {
    "(" <t:Type> ")" => t,
    "(" <fst:Type> "," <snd:Type> ")" => Type::Tuple(Box::new(fst), Box::new(snd)),
    <i:"identifier"> => Type::Var(i),
    <i:"upper_identifier"> => Type::Constructor(i),
}

// Also allows trailing commas
CommaSep<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
