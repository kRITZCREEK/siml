let add : Int -> Int -> Int =
  \x. \y. primadd;

type List<a> {
  Nil(),
  Cons(a, List<a>),
}

let map : forall a b. (a -> b) -> List<a> -> List<b> =
  letrec map = \f. \xs. match xs {
    List::Nil() => List::Nil(),
    List::Cons(x, xs) => List::Cons(f x, map f xs),
  } in
  map;

let foldr : forall a b. (a -> b -> a) -> a -> List<b> -> a =
  letrec foldr = \f. \acc. \xs. match xs {
    List::Nil() => acc,
    List::Cons(h, t) => foldr f (f acc h) t
  } in
  foldr;

let foldl : forall a b. (a -> b -> b) -> b -> List<a> -> b =
  letrec foldl = \f. \acc. \xs. match xs {
    List::Nil() => acc,
    List::Cons(h, t) => f h (foldl f acc t)
  } in
  foldl;

let reverse : forall a. List<a> -> List<a> =
  foldr (\xs. \x. List::Cons(x, xs)) List::Nil();

let list_concat : forall a. List<a> -> List<a> -> List<a> =
  \xs. \ys. foldl (\x. \acc. List::Cons(x, acc)) ys xs;

let main : Int =
  let xs = List::Cons(2, List::Cons(20, List::Nil())) in
  foldr add 0 List::Cons(1, List::Cons(4, List::Nil()));