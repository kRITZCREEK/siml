let add : Int -> Int -> Int =
  \x. \y. primadd;

type Either<a, b> {
  Left(a),
  Right(b),
}

type Maybe<a> {
  Just(a),
  Nothing()
}

let hush: forall a b. Either<a, b> -> Maybe<b> =
  \x. match x {
    Either::Left(l) => Maybe::Nothing(),
    Either::Right(r) => Maybe::Just(r),
  };

let main : Int =
  let x = Either::Left(12) in
  match hush x {
    Maybe::Just(x) => x,
    Maybe::Nothing() => 10,
  };