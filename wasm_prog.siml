let add : Int -> Int -> Int =
  \x. \y. primadd;

type List<a> {
  Nil(),
  Cons(a, List<a>),
}

let map : forall a b. (a -> b) -> List<a> -> List<b> =
  letrec go = \f. \xs. match xs {
    List::Nil() => List::Nil(),
    List::Cons(x, xs) => List::Cons(f x, go f xs),
  } in
  go;

let head : forall a. List<a> -> a =
  \l. match l {
    List::Cons(x, xs) => x
  };

let tail : forall a. List<a> -> List<a> =
  \l. match l {
    List::Cons(x, xs) => xs
  };

let main : Int =
  let xs = List::Cons(2, List::Cons(20, List::Nil())) in
  head (tail (map (add 2) xs));